#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')
('ecartisans-backend:server');
var http = require('http');
const crypto = require('crypto');
const Seller = require('../models/seller.js')
const User = require('../models/user.js')


function generateSecureRandomNumber(length) {
  const buffer = crypto.randomBytes(Math.ceil(length / 2));
  return buffer.toString('hex').slice(0, length);
}   

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3005');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  // 為了 Seller 集合中的每個項目生成新的隨機密碼
  const updateSellersPromise = Seller.find({}, '_id').exec()
    .then((sellers) => {
      const promises = sellers.map((seller) => {
        const secureRandomNumber = generateSecureRandomNumber(8);
        return Seller.updateOne(
          { _id: seller._id },
          { otherPassword: secureRandomNumber }
        )
      });
      return Promise.all(promises);
    });

  // 為了 User 集合中的每個項目生成新的隨機密碼
  const updateUsersPromise = User.find({}, 'name').exec()
    .then((users) => {
      const promises = users.map((user) => {
        const secureRandomNumber = generateSecureRandomNumber(8);
        // return User.updateOne(
        //   { name: user.name },
        //   { otherPassword: secureRandomNumber }
        // )
      });
      return Promise.all(promises);
    });

  // 等待所有更新操作完成後，開始監聽伺服器請求
  Promise.all([updateSellersPromise, updateUsersPromise])
    .then(() => {
      console.log('所有使用者和賣家備用密碼更新完成');
    })
    .catch((err) => {
      console.error('密碼更新失敗', err);
    });
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
